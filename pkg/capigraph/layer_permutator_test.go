package capigraph

import (
	"encoding/json"
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

var testPermStrategies6 string = "[null,null,[[0],[1]],[[0,0],[0,1],[0,2],[1,0],[1,1],[1,2]],[[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,2,0],[0,2,1],[0,2,2],[0,2,3],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,1,0],[1,1,1],[1,1,2],[1,1,3],[1,2,0],[1,2,1],[1,2,2],[1,2,3]],[[0,0,0,0],[0,0,0,1],[0,0,0,2],[0,0,0,3],[0,0,0,4],[0,0,1,0],[0,0,1,1],[0,0,1,2],[0,0,1,3],[0,0,1,4],[0,0,2,0],[0,0,2,1],[0,0,2,2],[0,0,2,3],[0,0,2,4],[0,0,3,0],[0,0,3,1],[0,0,3,2],[0,0,3,3],[0,0,3,4],[0,1,0,0],[0,1,0,1],[0,1,0,2],[0,1,0,3],[0,1,0,4],[0,1,1,0],[0,1,1,1],[0,1,1,2],[0,1,1,3],[0,1,1,4],[0,1,2,0],[0,1,2,1],[0,1,2,2],[0,1,2,3],[0,1,2,4],[0,1,3,0],[0,1,3,1],[0,1,3,2],[0,1,3,3],[0,1,3,4],[0,2,0,0],[0,2,0,1],[0,2,0,2],[0,2,0,3],[0,2,0,4],[0,2,1,0],[0,2,1,1],[0,2,1,2],[0,2,1,3],[0,2,1,4],[0,2,2,0],[0,2,2,1],[0,2,2,2],[0,2,2,3],[0,2,2,4],[0,2,3,0],[0,2,3,1],[0,2,3,2],[0,2,3,3],[0,2,3,4],[1,0,0,0],[1,0,0,1],[1,0,0,2],[1,0,0,3],[1,0,0,4],[1,0,1,0],[1,0,1,1],[1,0,1,2],[1,0,1,3],[1,0,1,4],[1,0,2,0],[1,0,2,1],[1,0,2,2],[1,0,2,3],[1,0,2,4],[1,0,3,0],[1,0,3,1],[1,0,3,2],[1,0,3,3],[1,0,3,4],[1,1,0,0],[1,1,0,1],[1,1,0,2],[1,1,0,3],[1,1,0,4],[1,1,1,0],[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,1,4],[1,1,2,0],[1,1,2,1],[1,1,2,2],[1,1,2,3],[1,1,2,4],[1,1,3,0],[1,1,3,1],[1,1,3,2],[1,1,3,3],[1,1,3,4],[1,2,0,0],[1,2,0,1],[1,2,0,2],[1,2,0,3],[1,2,0,4],[1,2,1,0],[1,2,1,1],[1,2,1,2],[1,2,1,3],[1,2,1,4],[1,2,2,0],[1,2,2,1],[1,2,2,2],[1,2,2,3],[1,2,2,4],[1,2,3,0],[1,2,3,1],[1,2,3,2],[1,2,3,3],[1,2,3,4]],[[0,0,0,0,0],[0,0,0,0,1],[0,0,0,0,2],[0,0,0,0,3],[0,0,0,0,4],[0,0,0,0,5],[0,0,0,1,0],[0,0,0,1,1],[0,0,0,1,2],[0,0,0,1,3],[0,0,0,1,4],[0,0,0,1,5],[0,0,0,2,0],[0,0,0,2,1],[0,0,0,2,2],[0,0,0,2,3],[0,0,0,2,4],[0,0,0,2,5],[0,0,0,3,0],[0,0,0,3,1],[0,0,0,3,2],[0,0,0,3,3],[0,0,0,3,4],[0,0,0,3,5],[0,0,0,4,0],[0,0,0,4,1],[0,0,0,4,2],[0,0,0,4,3],[0,0,0,4,4],[0,0,0,4,5],[0,0,1,0,0],[0,0,1,0,1],[0,0,1,0,2],[0,0,1,0,3],[0,0,1,0,4],[0,0,1,0,5],[0,0,1,1,0],[0,0,1,1,1],[0,0,1,1,2],[0,0,1,1,3],[0,0,1,1,4],[0,0,1,1,5],[0,0,1,2,0],[0,0,1,2,1],[0,0,1,2,2],[0,0,1,2,3],[0,0,1,2,4],[0,0,1,2,5],[0,0,1,3,0],[0,0,1,3,1],[0,0,1,3,2],[0,0,1,3,3],[0,0,1,3,4],[0,0,1,3,5],[0,0,1,4,0],[0,0,1,4,1],[0,0,1,4,2],[0,0,1,4,3],[0,0,1,4,4],[0,0,1,4,5],[0,0,2,0,0],[0,0,2,0,1],[0,0,2,0,2],[0,0,2,0,3],[0,0,2,0,4],[0,0,2,0,5],[0,0,2,1,0],[0,0,2,1,1],[0,0,2,1,2],[0,0,2,1,3],[0,0,2,1,4],[0,0,2,1,5],[0,0,2,2,0],[0,0,2,2,1],[0,0,2,2,2],[0,0,2,2,3],[0,0,2,2,4],[0,0,2,2,5],[0,0,2,3,0],[0,0,2,3,1],[0,0,2,3,2],[0,0,2,3,3],[0,0,2,3,4],[0,0,2,3,5],[0,0,2,4,0],[0,0,2,4,1],[0,0,2,4,2],[0,0,2,4,3],[0,0,2,4,4],[0,0,2,4,5],[0,0,3,0,0],[0,0,3,0,1],[0,0,3,0,2],[0,0,3,0,3],[0,0,3,0,4],[0,0,3,0,5],[0,0,3,1,0],[0,0,3,1,1],[0,0,3,1,2],[0,0,3,1,3],[0,0,3,1,4],[0,0,3,1,5],[0,0,3,2,0],[0,0,3,2,1],[0,0,3,2,2],[0,0,3,2,3],[0,0,3,2,4],[0,0,3,2,5],[0,0,3,3,0],[0,0,3,3,1],[0,0,3,3,2],[0,0,3,3,3],[0,0,3,3,4],[0,0,3,3,5],[0,0,3,4,0],[0,0,3,4,1],[0,0,3,4,2],[0,0,3,4,3],[0,0,3,4,4],[0,0,3,4,5],[0,1,0,0,0],[0,1,0,0,1],[0,1,0,0,2],[0,1,0,0,3],[0,1,0,0,4],[0,1,0,0,5],[0,1,0,1,0],[0,1,0,1,1],[0,1,0,1,2],[0,1,0,1,3],[0,1,0,1,4],[0,1,0,1,5],[0,1,0,2,0],[0,1,0,2,1],[0,1,0,2,2],[0,1,0,2,3],[0,1,0,2,4],[0,1,0,2,5],[0,1,0,3,0],[0,1,0,3,1],[0,1,0,3,2],[0,1,0,3,3],[0,1,0,3,4],[0,1,0,3,5],[0,1,0,4,0],[0,1,0,4,1],[0,1,0,4,2],[0,1,0,4,3],[0,1,0,4,4],[0,1,0,4,5],[0,1,1,0,0],[0,1,1,0,1],[0,1,1,0,2],[0,1,1,0,3],[0,1,1,0,4],[0,1,1,0,5],[0,1,1,1,0],[0,1,1,1,1],[0,1,1,1,2],[0,1,1,1,3],[0,1,1,1,4],[0,1,1,1,5],[0,1,1,2,0],[0,1,1,2,1],[0,1,1,2,2],[0,1,1,2,3],[0,1,1,2,4],[0,1,1,2,5],[0,1,1,3,0],[0,1,1,3,1],[0,1,1,3,2],[0,1,1,3,3],[0,1,1,3,4],[0,1,1,3,5],[0,1,1,4,0],[0,1,1,4,1],[0,1,1,4,2],[0,1,1,4,3],[0,1,1,4,4],[0,1,1,4,5],[0,1,2,0,0],[0,1,2,0,1],[0,1,2,0,2],[0,1,2,0,3],[0,1,2,0,4],[0,1,2,0,5],[0,1,2,1,0],[0,1,2,1,1],[0,1,2,1,2],[0,1,2,1,3],[0,1,2,1,4],[0,1,2,1,5],[0,1,2,2,0],[0,1,2,2,1],[0,1,2,2,2],[0,1,2,2,3],[0,1,2,2,4],[0,1,2,2,5],[0,1,2,3,0],[0,1,2,3,1],[0,1,2,3,2],[0,1,2,3,3],[0,1,2,3,4],[0,1,2,3,5],[0,1,2,4,0],[0,1,2,4,1],[0,1,2,4,2],[0,1,2,4,3],[0,1,2,4,4],[0,1,2,4,5],[0,1,3,0,0],[0,1,3,0,1],[0,1,3,0,2],[0,1,3,0,3],[0,1,3,0,4],[0,1,3,0,5],[0,1,3,1,0],[0,1,3,1,1],[0,1,3,1,2],[0,1,3,1,3],[0,1,3,1,4],[0,1,3,1,5],[0,1,3,2,0],[0,1,3,2,1],[0,1,3,2,2],[0,1,3,2,3],[0,1,3,2,4],[0,1,3,2,5],[0,1,3,3,0],[0,1,3,3,1],[0,1,3,3,2],[0,1,3,3,3],[0,1,3,3,4],[0,1,3,3,5],[0,1,3,4,0],[0,1,3,4,1],[0,1,3,4,2],[0,1,3,4,3],[0,1,3,4,4],[0,1,3,4,5],[0,2,0,0,0],[0,2,0,0,1],[0,2,0,0,2],[0,2,0,0,3],[0,2,0,0,4],[0,2,0,0,5],[0,2,0,1,0],[0,2,0,1,1],[0,2,0,1,2],[0,2,0,1,3],[0,2,0,1,4],[0,2,0,1,5],[0,2,0,2,0],[0,2,0,2,1],[0,2,0,2,2],[0,2,0,2,3],[0,2,0,2,4],[0,2,0,2,5],[0,2,0,3,0],[0,2,0,3,1],[0,2,0,3,2],[0,2,0,3,3],[0,2,0,3,4],[0,2,0,3,5],[0,2,0,4,0],[0,2,0,4,1],[0,2,0,4,2],[0,2,0,4,3],[0,2,0,4,4],[0,2,0,4,5],[0,2,1,0,0],[0,2,1,0,1],[0,2,1,0,2],[0,2,1,0,3],[0,2,1,0,4],[0,2,1,0,5],[0,2,1,1,0],[0,2,1,1,1],[0,2,1,1,2],[0,2,1,1,3],[0,2,1,1,4],[0,2,1,1,5],[0,2,1,2,0],[0,2,1,2,1],[0,2,1,2,2],[0,2,1,2,3],[0,2,1,2,4],[0,2,1,2,5],[0,2,1,3,0],[0,2,1,3,1],[0,2,1,3,2],[0,2,1,3,3],[0,2,1,3,4],[0,2,1,3,5],[0,2,1,4,0],[0,2,1,4,1],[0,2,1,4,2],[0,2,1,4,3],[0,2,1,4,4],[0,2,1,4,5],[0,2,2,0,0],[0,2,2,0,1],[0,2,2,0,2],[0,2,2,0,3],[0,2,2,0,4],[0,2,2,0,5],[0,2,2,1,0],[0,2,2,1,1],[0,2,2,1,2],[0,2,2,1,3],[0,2,2,1,4],[0,2,2,1,5],[0,2,2,2,0],[0,2,2,2,1],[0,2,2,2,2],[0,2,2,2,3],[0,2,2,2,4],[0,2,2,2,5],[0,2,2,3,0],[0,2,2,3,1],[0,2,2,3,2],[0,2,2,3,3],[0,2,2,3,4],[0,2,2,3,5],[0,2,2,4,0],[0,2,2,4,1],[0,2,2,4,2],[0,2,2,4,3],[0,2,2,4,4],[0,2,2,4,5],[0,2,3,0,0],[0,2,3,0,1],[0,2,3,0,2],[0,2,3,0,3],[0,2,3,0,4],[0,2,3,0,5],[0,2,3,1,0],[0,2,3,1,1],[0,2,3,1,2],[0,2,3,1,3],[0,2,3,1,4],[0,2,3,1,5],[0,2,3,2,0],[0,2,3,2,1],[0,2,3,2,2],[0,2,3,2,3],[0,2,3,2,4],[0,2,3,2,5],[0,2,3,3,0],[0,2,3,3,1],[0,2,3,3,2],[0,2,3,3,3],[0,2,3,3,4],[0,2,3,3,5],[0,2,3,4,0],[0,2,3,4,1],[0,2,3,4,2],[0,2,3,4,3],[0,2,3,4,4],[0,2,3,4,5],[1,0,0,0,0],[1,0,0,0,1],[1,0,0,0,2],[1,0,0,0,3],[1,0,0,0,4],[1,0,0,0,5],[1,0,0,1,0],[1,0,0,1,1],[1,0,0,1,2],[1,0,0,1,3],[1,0,0,1,4],[1,0,0,1,5],[1,0,0,2,0],[1,0,0,2,1],[1,0,0,2,2],[1,0,0,2,3],[1,0,0,2,4],[1,0,0,2,5],[1,0,0,3,0],[1,0,0,3,1],[1,0,0,3,2],[1,0,0,3,3],[1,0,0,3,4],[1,0,0,3,5],[1,0,0,4,0],[1,0,0,4,1],[1,0,0,4,2],[1,0,0,4,3],[1,0,0,4,4],[1,0,0,4,5],[1,0,1,0,0],[1,0,1,0,1],[1,0,1,0,2],[1,0,1,0,3],[1,0,1,0,4],[1,0,1,0,5],[1,0,1,1,0],[1,0,1,1,1],[1,0,1,1,2],[1,0,1,1,3],[1,0,1,1,4],[1,0,1,1,5],[1,0,1,2,0],[1,0,1,2,1],[1,0,1,2,2],[1,0,1,2,3],[1,0,1,2,4],[1,0,1,2,5],[1,0,1,3,0],[1,0,1,3,1],[1,0,1,3,2],[1,0,1,3,3],[1,0,1,3,4],[1,0,1,3,5],[1,0,1,4,0],[1,0,1,4,1],[1,0,1,4,2],[1,0,1,4,3],[1,0,1,4,4],[1,0,1,4,5],[1,0,2,0,0],[1,0,2,0,1],[1,0,2,0,2],[1,0,2,0,3],[1,0,2,0,4],[1,0,2,0,5],[1,0,2,1,0],[1,0,2,1,1],[1,0,2,1,2],[1,0,2,1,3],[1,0,2,1,4],[1,0,2,1,5],[1,0,2,2,0],[1,0,2,2,1],[1,0,2,2,2],[1,0,2,2,3],[1,0,2,2,4],[1,0,2,2,5],[1,0,2,3,0],[1,0,2,3,1],[1,0,2,3,2],[1,0,2,3,3],[1,0,2,3,4],[1,0,2,3,5],[1,0,2,4,0],[1,0,2,4,1],[1,0,2,4,2],[1,0,2,4,3],[1,0,2,4,4],[1,0,2,4,5],[1,0,3,0,0],[1,0,3,0,1],[1,0,3,0,2],[1,0,3,0,3],[1,0,3,0,4],[1,0,3,0,5],[1,0,3,1,0],[1,0,3,1,1],[1,0,3,1,2],[1,0,3,1,3],[1,0,3,1,4],[1,0,3,1,5],[1,0,3,2,0],[1,0,3,2,1],[1,0,3,2,2],[1,0,3,2,3],[1,0,3,2,4],[1,0,3,2,5],[1,0,3,3,0],[1,0,3,3,1],[1,0,3,3,2],[1,0,3,3,3],[1,0,3,3,4],[1,0,3,3,5],[1,0,3,4,0],[1,0,3,4,1],[1,0,3,4,2],[1,0,3,4,3],[1,0,3,4,4],[1,0,3,4,5],[1,1,0,0,0],[1,1,0,0,1],[1,1,0,0,2],[1,1,0,0,3],[1,1,0,0,4],[1,1,0,0,5],[1,1,0,1,0],[1,1,0,1,1],[1,1,0,1,2],[1,1,0,1,3],[1,1,0,1,4],[1,1,0,1,5],[1,1,0,2,0],[1,1,0,2,1],[1,1,0,2,2],[1,1,0,2,3],[1,1,0,2,4],[1,1,0,2,5],[1,1,0,3,0],[1,1,0,3,1],[1,1,0,3,2],[1,1,0,3,3],[1,1,0,3,4],[1,1,0,3,5],[1,1,0,4,0],[1,1,0,4,1],[1,1,0,4,2],[1,1,0,4,3],[1,1,0,4,4],[1,1,0,4,5],[1,1,1,0,0],[1,1,1,0,1],[1,1,1,0,2],[1,1,1,0,3],[1,1,1,0,4],[1,1,1,0,5],[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,2],[1,1,1,1,3],[1,1,1,1,4],[1,1,1,1,5],[1,1,1,2,0],[1,1,1,2,1],[1,1,1,2,2],[1,1,1,2,3],[1,1,1,2,4],[1,1,1,2,5],[1,1,1,3,0],[1,1,1,3,1],[1,1,1,3,2],[1,1,1,3,3],[1,1,1,3,4],[1,1,1,3,5],[1,1,1,4,0],[1,1,1,4,1],[1,1,1,4,2],[1,1,1,4,3],[1,1,1,4,4],[1,1,1,4,5],[1,1,2,0,0],[1,1,2,0,1],[1,1,2,0,2],[1,1,2,0,3],[1,1,2,0,4],[1,1,2,0,5],[1,1,2,1,0],[1,1,2,1,1],[1,1,2,1,2],[1,1,2,1,3],[1,1,2,1,4],[1,1,2,1,5],[1,1,2,2,0],[1,1,2,2,1],[1,1,2,2,2],[1,1,2,2,3],[1,1,2,2,4],[1,1,2,2,5],[1,1,2,3,0],[1,1,2,3,1],[1,1,2,3,2],[1,1,2,3,3],[1,1,2,3,4],[1,1,2,3,5],[1,1,2,4,0],[1,1,2,4,1],[1,1,2,4,2],[1,1,2,4,3],[1,1,2,4,4],[1,1,2,4,5],[1,1,3,0,0],[1,1,3,0,1],[1,1,3,0,2],[1,1,3,0,3],[1,1,3,0,4],[1,1,3,0,5],[1,1,3,1,0],[1,1,3,1,1],[1,1,3,1,2],[1,1,3,1,3],[1,1,3,1,4],[1,1,3,1,5],[1,1,3,2,0],[1,1,3,2,1],[1,1,3,2,2],[1,1,3,2,3],[1,1,3,2,4],[1,1,3,2,5],[1,1,3,3,0],[1,1,3,3,1],[1,1,3,3,2],[1,1,3,3,3],[1,1,3,3,4],[1,1,3,3,5],[1,1,3,4,0],[1,1,3,4,1],[1,1,3,4,2],[1,1,3,4,3],[1,1,3,4,4],[1,1,3,4,5],[1,2,0,0,0],[1,2,0,0,1],[1,2,0,0,2],[1,2,0,0,3],[1,2,0,0,4],[1,2,0,0,5],[1,2,0,1,0],[1,2,0,1,1],[1,2,0,1,2],[1,2,0,1,3],[1,2,0,1,4],[1,2,0,1,5],[1,2,0,2,0],[1,2,0,2,1],[1,2,0,2,2],[1,2,0,2,3],[1,2,0,2,4],[1,2,0,2,5],[1,2,0,3,0],[1,2,0,3,1],[1,2,0,3,2],[1,2,0,3,3],[1,2,0,3,4],[1,2,0,3,5],[1,2,0,4,0],[1,2,0,4,1],[1,2,0,4,2],[1,2,0,4,3],[1,2,0,4,4],[1,2,0,4,5],[1,2,1,0,0],[1,2,1,0,1],[1,2,1,0,2],[1,2,1,0,3],[1,2,1,0,4],[1,2,1,0,5],[1,2,1,1,0],[1,2,1,1,1],[1,2,1,1,2],[1,2,1,1,3],[1,2,1,1,4],[1,2,1,1,5],[1,2,1,2,0],[1,2,1,2,1],[1,2,1,2,2],[1,2,1,2,3],[1,2,1,2,4],[1,2,1,2,5],[1,2,1,3,0],[1,2,1,3,1],[1,2,1,3,2],[1,2,1,3,3],[1,2,1,3,4],[1,2,1,3,5],[1,2,1,4,0],[1,2,1,4,1],[1,2,1,4,2],[1,2,1,4,3],[1,2,1,4,4],[1,2,1,4,5],[1,2,2,0,0],[1,2,2,0,1],[1,2,2,0,2],[1,2,2,0,3],[1,2,2,0,4],[1,2,2,0,5],[1,2,2,1,0],[1,2,2,1,1],[1,2,2,1,2],[1,2,2,1,3],[1,2,2,1,4],[1,2,2,1,5],[1,2,2,2,0],[1,2,2,2,1],[1,2,2,2,2],[1,2,2,2,3],[1,2,2,2,4],[1,2,2,2,5],[1,2,2,3,0],[1,2,2,3,1],[1,2,2,3,2],[1,2,2,3,3],[1,2,2,3,4],[1,2,2,3,5],[1,2,2,4,0],[1,2,2,4,1],[1,2,2,4,2],[1,2,2,4,3],[1,2,2,4,4],[1,2,2,4,5],[1,2,3,0,0],[1,2,3,0,1],[1,2,3,0,2],[1,2,3,0,3],[1,2,3,0,4],[1,2,3,0,5],[1,2,3,1,0],[1,2,3,1,1],[1,2,3,1,2],[1,2,3,1,3],[1,2,3,1,4],[1,2,3,1,5],[1,2,3,2,0],[1,2,3,2,1],[1,2,3,2,2],[1,2,3,2,3],[1,2,3,2,4],[1,2,3,2,5],[1,2,3,3,0],[1,2,3,3,1],[1,2,3,3,2],[1,2,3,3,3],[1,2,3,3,4],[1,2,3,3,5],[1,2,3,4,0],[1,2,3,4,1],[1,2,3,4,2],[1,2,3,4,3],[1,2,3,4,4],[1,2,3,4,5]]]"
var testFact6 string = "[1,1,2,6,24,120,720]"

func TestInit(t *testing.T) {
	lp := NewLayerPermutator()
	b, _ := json.Marshal(lp.P)
	assert.Equal(t, testPermStrategies6, string(b))
	b, _ = json.Marshal(lp.Fact)
	assert.Equal(t, testFact6, string(b))
}

func TestSwapFunc(t *testing.T) {
	lp := NewLayerPermutator()
	intervalStarts := []int{1, 6}
	intervalLengths := []int{4, 2}
	in := []int16{-1, 10, 20, 30, 40, -2, 100, 200, -3}
	sb := strings.Builder{}
	lp.SwapIterator(intervalStarts, intervalLengths, len(intervalLengths), in, func(totalCnt int, perm []int16) {
		sb.WriteString(fmt.Sprintf("%d %v, ", totalCnt, perm))
	})
	assert.Equal(t, "0 [-1 40 10 20 30 -2 200 100 -3], 1 [-1 40 10 20 30 -2 100 200 -3], 2 [-1 30 40 20 10 -2 200 100 -3], 3 [-1 30 40 20 10 -2 100 200 -3], 4 [-1 30 10 40 20 -2 200 100 -3], 5 [-1 30 10 40 20 -2 100 200 -3], 6 [-1 30 10 20 40 -2 200 100 -3], 7 [-1 30 10 20 40 -2 100 200 -3], 8 [-1 40 30 10 20 -2 200 100 -3], 9 [-1 40 30 10 20 -2 100 200 -3], 10 [-1 20 40 10 30 -2 200 100 -3], 11 [-1 20 40 10 30 -2 100 200 -3], 12 [-1 20 30 40 10 -2 200 100 -3], 13 [-1 20 30 40 10 -2 100 200 -3], 14 [-1 20 30 10 40 -2 200 100 -3], 15 [-1 20 30 10 40 -2 100 200 -3], 16 [-1 40 10 30 20 -2 200 100 -3], 17 [-1 40 10 30 20 -2 100 200 -3], 18 [-1 20 40 30 10 -2 200 100 -3], 19 [-1 20 40 30 10 -2 100 200 -3], 20 [-1 20 10 40 30 -2 200 100 -3], 21 [-1 20 10 40 30 -2 100 200 -3], 22 [-1 20 10 30 40 -2 200 100 -3], 23 [-1 20 10 30 40 -2 100 200 -3], 24 [-1 40 20 10 30 -2 200 100 -3], 25 [-1 40 20 10 30 -2 100 200 -3], 26 [-1 30 40 10 20 -2 200 100 -3], 27 [-1 30 40 10 20 -2 100 200 -3], 28 [-1 30 20 40 10 -2 200 100 -3], 29 [-1 30 20 40 10 -2 100 200 -3], 30 [-1 30 20 10 40 -2 200 100 -3], 31 [-1 30 20 10 40 -2 100 200 -3], 32 [-1 40 30 20 10 -2 200 100 -3], 33 [-1 40 30 20 10 -2 100 200 -3], 34 [-1 10 40 20 30 -2 200 100 -3], 35 [-1 10 40 20 30 -2 100 200 -3], 36 [-1 10 30 40 20 -2 200 100 -3], 37 [-1 10 30 40 20 -2 100 200 -3], 38 [-1 10 30 20 40 -2 200 100 -3], 39 [-1 10 30 20 40 -2 100 200 -3], 40 [-1 40 20 30 10 -2 200 100 -3], 41 [-1 40 20 30 10 -2 100 200 -3], 42 [-1 10 40 30 20 -2 200 100 -3], 43 [-1 10 40 30 20 -2 100 200 -3], 44 [-1 10 20 40 30 -2 200 100 -3], 45 [-1 10 20 40 30 -2 100 200 -3], 46 [-1 10 20 30 40 -2 200 100 -3], 47 [-1 10 20 30 40 -2 100 200 -3], ", sb.String())
}

func TestInsert(t *testing.T) {
	lp := NewLayerPermutator()

	in := []int16{-1, -2, -3, -4, 100}
	lp.insertPermutationByIdx(in, 4, 1)
	assert.Equal(t, "[-1 100 -2 -3 -4]", fmt.Sprintf("%v", in))

	// Insert 100 and 200 starting at 0, 6x7=42 variants
	in = []int16{1, 2, 3, 4, 5, 100, 200}
	sb := strings.Builder{}
	lp.InsertIterator(5, 2, in, func(totalCnt int, perm []int16) {
		sb.WriteString(fmt.Sprintf("%d %v, ", totalCnt, perm))
	})
	assert.Equal(t, "0 [200 100 1 2 3 4 5], 1 [100 200 1 2 3 4 5], 2 [100 1 200 2 3 4 5], 3 [100 1 2 200 3 4 5], 4 [100 1 2 3 200 4 5], 5 [100 1 2 3 4 200 5], 6 [100 1 2 3 4 5 200], 7 [200 1 100 2 3 4 5], 8 [1 200 100 2 3 4 5], 9 [1 100 200 2 3 4 5], 10 [1 100 2 200 3 4 5], 11 [1 100 2 3 200 4 5], 12 [1 100 2 3 4 200 5], 13 [1 100 2 3 4 5 200], 14 [200 1 2 100 3 4 5], 15 [1 200 2 100 3 4 5], 16 [1 2 200 100 3 4 5], 17 [1 2 100 200 3 4 5], 18 [1 2 100 3 200 4 5], 19 [1 2 100 3 4 200 5], 20 [1 2 100 3 4 5 200], 21 [200 1 2 3 100 4 5], 22 [1 200 2 3 100 4 5], 23 [1 2 200 3 100 4 5], 24 [1 2 3 200 100 4 5], 25 [1 2 3 100 200 4 5], 26 [1 2 3 100 4 200 5], 27 [1 2 3 100 4 5 200], 28 [200 1 2 3 4 100 5], 29 [1 200 2 3 4 100 5], 30 [1 2 200 3 4 100 5], 31 [1 2 3 200 4 100 5], 32 [1 2 3 4 200 100 5], 33 [1 2 3 4 100 200 5], 34 [1 2 3 4 100 5 200], 35 [200 1 2 3 4 5 100], 36 [1 200 2 3 4 5 100], 37 [1 2 200 3 4 5 100], 38 [1 2 3 200 4 5 100], 39 [1 2 3 4 200 5 100], 40 [1 2 3 4 5 200 100], 41 [1 2 3 4 5 100 200], ", sb.String())
}

/*
	func TestSwap(t *testing.T) {
		lp := NewLayerPermutator()

		// All permutations of 10/20/30/40 and 100/200 intervals
		permIntervalStarts := [20]int{1, 6}
		permIntervalLengths := [20]int{4, 2}
		a := []int16{-1, 10, 20, 30, 40, -2, 100, 200, -3}
		sb := strings.Builder{}
		for i, perm := range lp.SwapPermIterator(&permIntervalStarts, &permIntervalLengths, 2, a) {
			sb.WriteString(fmt.Sprintf("%d %v, ", i, perm))
		}
		assert.Equal(t, "0 [-1 40 10 20 30 -2 200 100 -3], 1 [-1 40 10 20 30 -2 100 200 -3], 2 [-1 30 40 20 10 -2 200 100 -3], 3 [-1 30 40 20 10 -2 100 200 -3], 4 [-1 30 10 40 20 -2 200 100 -3], 5 [-1 30 10 40 20 -2 100 200 -3], 6 [-1 30 10 20 40 -2 200 100 -3], 7 [-1 30 10 20 40 -2 100 200 -3], 8 [-1 40 30 10 20 -2 200 100 -3], 9 [-1 40 30 10 20 -2 100 200 -3], 10 [-1 20 40 10 30 -2 200 100 -3], 11 [-1 20 40 10 30 -2 100 200 -3], 12 [-1 20 30 40 10 -2 200 100 -3], 13 [-1 20 30 40 10 -2 100 200 -3], 14 [-1 20 30 10 40 -2 200 100 -3], 15 [-1 20 30 10 40 -2 100 200 -3], 16 [-1 40 10 30 20 -2 200 100 -3], 17 [-1 40 10 30 20 -2 100 200 -3], 18 [-1 20 40 30 10 -2 200 100 -3], 19 [-1 20 40 30 10 -2 100 200 -3], 20 [-1 20 10 40 30 -2 200 100 -3], 21 [-1 20 10 40 30 -2 100 200 -3], 22 [-1 20 10 30 40 -2 200 100 -3], 23 [-1 20 10 30 40 -2 100 200 -3], 24 [-1 40 20 10 30 -2 200 100 -3], 25 [-1 40 20 10 30 -2 100 200 -3], 26 [-1 30 40 10 20 -2 200 100 -3], 27 [-1 30 40 10 20 -2 100 200 -3], 28 [-1 30 20 40 10 -2 200 100 -3], 29 [-1 30 20 40 10 -2 100 200 -3], 30 [-1 30 20 10 40 -2 200 100 -3], 31 [-1 30 20 10 40 -2 100 200 -3], 32 [-1 40 30 20 10 -2 200 100 -3], 33 [-1 40 30 20 10 -2 100 200 -3], 34 [-1 10 40 20 30 -2 200 100 -3], 35 [-1 10 40 20 30 -2 100 200 -3], 36 [-1 10 30 40 20 -2 200 100 -3], 37 [-1 10 30 40 20 -2 100 200 -3], 38 [-1 10 30 20 40 -2 200 100 -3], 39 [-1 10 30 20 40 -2 100 200 -3], 40 [-1 40 20 30 10 -2 200 100 -3], 41 [-1 40 20 30 10 -2 100 200 -3], 42 [-1 10 40 30 20 -2 200 100 -3], 43 [-1 10 40 30 20 -2 100 200 -3], 44 [-1 10 20 40 30 -2 200 100 -3], 45 [-1 10 20 40 30 -2 100 200 -3], 46 [-1 10 20 30 40 -2 200 100 -3], 47 [-1 10 20 30 40 -2 100 200 -3], ", sb.String())
	}
*/
func TestSwapAndInsert(t *testing.T) {
	lp := NewLayerPermutator()

	// Swap permutations of 10/20 and 100/200, and insert 1000 and 2000 before 1000, total 2x2x8*9=288 final permutations
	in := []int16{-1, 10, 20, -2, 100, 200, -3, 1000, 2000}
	intervalStarts := []int{1, 4}
	intervalLengths := []int{2, 2}
	sb := strings.Builder{}
	lp.SwapAndInsertIterator(intervalStarts, intervalLengths, len(intervalStarts), 7, 2, in, func(totalCnt int, perm []int16) {
		sb.WriteString(fmt.Sprintf("%d %v, ", totalCnt, perm))
	})
	assert.Equal(t, "0 [2000 1000 -1 20 10 -2 200 100 -3], 1 [1000 2000 -1 20 10 -2 200 100 -3], 2 [1000 -1 2000 20 10 -2 200 100 -3], 3 [1000 -1 20 2000 10 -2 200 100 -3], 4 [1000 -1 20 10 2000 -2 200 100 -3], 5 [1000 -1 20 10 -2 2000 200 100 -3], 6 [1000 -1 20 10 -2 200 2000 100 -3], 7 [1000 -1 20 10 -2 200 100 2000 -3], 8 [1000 -1 20 10 -2 200 100 -3 2000], 9 [2000 -1 1000 20 10 -2 200 100 -3], 10 [-1 2000 1000 20 10 -2 200 100 -3], 11 [-1 1000 2000 20 10 -2 200 100 -3], 12 [-1 1000 20 2000 10 -2 200 100 -3], 13 [-1 1000 20 10 2000 -2 200 100 -3], 14 [-1 1000 20 10 -2 2000 200 100 -3], 15 [-1 1000 20 10 -2 200 2000 100 -3], 16 [-1 1000 20 10 -2 200 100 2000 -3], 17 [-1 1000 20 10 -2 200 100 -3 2000], 18 [2000 -1 20 1000 10 -2 200 100 -3], 19 [-1 2000 20 1000 10 -2 200 100 -3], 20 [-1 20 2000 1000 10 -2 200 100 -3], 21 [-1 20 1000 2000 10 -2 200 100 -3], 22 [-1 20 1000 10 2000 -2 200 100 -3], 23 [-1 20 1000 10 -2 2000 200 100 -3], 24 [-1 20 1000 10 -2 200 2000 100 -3], 25 [-1 20 1000 10 -2 200 100 2000 -3], 26 [-1 20 1000 10 -2 200 100 -3 2000], 27 [2000 -1 20 10 1000 -2 200 100 -3], 28 [-1 2000 20 10 1000 -2 200 100 -3], 29 [-1 20 2000 10 1000 -2 200 100 -3], 30 [-1 20 10 2000 1000 -2 200 100 -3], 31 [-1 20 10 1000 2000 -2 200 100 -3], 32 [-1 20 10 1000 -2 2000 200 100 -3], 33 [-1 20 10 1000 -2 200 2000 100 -3], 34 [-1 20 10 1000 -2 200 100 2000 -3], 35 [-1 20 10 1000 -2 200 100 -3 2000], 36 [2000 -1 20 10 -2 1000 200 100 -3], 37 [-1 2000 20 10 -2 1000 200 100 -3], 38 [-1 20 2000 10 -2 1000 200 100 -3], 39 [-1 20 10 2000 -2 1000 200 100 -3], 40 [-1 20 10 -2 2000 1000 200 100 -3], 41 [-1 20 10 -2 1000 2000 200 100 -3], 42 [-1 20 10 -2 1000 200 2000 100 -3], 43 [-1 20 10 -2 1000 200 100 2000 -3], 44 [-1 20 10 -2 1000 200 100 -3 2000], 45 [2000 -1 20 10 -2 200 1000 100 -3], 46 [-1 2000 20 10 -2 200 1000 100 -3], 47 [-1 20 2000 10 -2 200 1000 100 -3], 48 [-1 20 10 2000 -2 200 1000 100 -3], 49 [-1 20 10 -2 2000 200 1000 100 -3], 50 [-1 20 10 -2 200 2000 1000 100 -3], 51 [-1 20 10 -2 200 1000 2000 100 -3], 52 [-1 20 10 -2 200 1000 100 2000 -3], 53 [-1 20 10 -2 200 1000 100 -3 2000], 54 [2000 -1 20 10 -2 200 100 1000 -3], 55 [-1 2000 20 10 -2 200 100 1000 -3], 56 [-1 20 2000 10 -2 200 100 1000 -3], 57 [-1 20 10 2000 -2 200 100 1000 -3], 58 [-1 20 10 -2 2000 200 100 1000 -3], 59 [-1 20 10 -2 200 2000 100 1000 -3], 60 [-1 20 10 -2 200 100 2000 1000 -3], 61 [-1 20 10 -2 200 100 1000 2000 -3], 62 [-1 20 10 -2 200 100 1000 -3 2000], 63 [2000 -1 20 10 -2 200 100 -3 1000], 64 [-1 2000 20 10 -2 200 100 -3 1000], 65 [-1 20 2000 10 -2 200 100 -3 1000], 66 [-1 20 10 2000 -2 200 100 -3 1000], 67 [-1 20 10 -2 2000 200 100 -3 1000], 68 [-1 20 10 -2 200 2000 100 -3 1000], 69 [-1 20 10 -2 200 100 2000 -3 1000], 70 [-1 20 10 -2 200 100 -3 2000 1000], 71 [-1 20 10 -2 200 100 -3 1000 2000], 72 [2000 1000 -1 20 10 -2 100 200 -3], 73 [1000 2000 -1 20 10 -2 100 200 -3], 74 [1000 -1 2000 20 10 -2 100 200 -3], 75 [1000 -1 20 2000 10 -2 100 200 -3], 76 [1000 -1 20 10 2000 -2 100 200 -3], 77 [1000 -1 20 10 -2 2000 100 200 -3], 78 [1000 -1 20 10 -2 100 2000 200 -3], 79 [1000 -1 20 10 -2 100 200 2000 -3], 80 [1000 -1 20 10 -2 100 200 -3 2000], 81 [2000 -1 1000 20 10 -2 100 200 -3], 82 [-1 2000 1000 20 10 -2 100 200 -3], 83 [-1 1000 2000 20 10 -2 100 200 -3], 84 [-1 1000 20 2000 10 -2 100 200 -3], 85 [-1 1000 20 10 2000 -2 100 200 -3], 86 [-1 1000 20 10 -2 2000 100 200 -3], 87 [-1 1000 20 10 -2 100 2000 200 -3], 88 [-1 1000 20 10 -2 100 200 2000 -3], 89 [-1 1000 20 10 -2 100 200 -3 2000], 90 [2000 -1 20 1000 10 -2 100 200 -3], 91 [-1 2000 20 1000 10 -2 100 200 -3], 92 [-1 20 2000 1000 10 -2 100 200 -3], 93 [-1 20 1000 2000 10 -2 100 200 -3], 94 [-1 20 1000 10 2000 -2 100 200 -3], 95 [-1 20 1000 10 -2 2000 100 200 -3], 96 [-1 20 1000 10 -2 100 2000 200 -3], 97 [-1 20 1000 10 -2 100 200 2000 -3], 98 [-1 20 1000 10 -2 100 200 -3 2000], 99 [2000 -1 20 10 1000 -2 100 200 -3], 100 [-1 2000 20 10 1000 -2 100 200 -3], 101 [-1 20 2000 10 1000 -2 100 200 -3], 102 [-1 20 10 2000 1000 -2 100 200 -3], 103 [-1 20 10 1000 2000 -2 100 200 -3], 104 [-1 20 10 1000 -2 2000 100 200 -3], 105 [-1 20 10 1000 -2 100 2000 200 -3], 106 [-1 20 10 1000 -2 100 200 2000 -3], 107 [-1 20 10 1000 -2 100 200 -3 2000], 108 [2000 -1 20 10 -2 1000 100 200 -3], 109 [-1 2000 20 10 -2 1000 100 200 -3], 110 [-1 20 2000 10 -2 1000 100 200 -3], 111 [-1 20 10 2000 -2 1000 100 200 -3], 112 [-1 20 10 -2 2000 1000 100 200 -3], 113 [-1 20 10 -2 1000 2000 100 200 -3], 114 [-1 20 10 -2 1000 100 2000 200 -3], 115 [-1 20 10 -2 1000 100 200 2000 -3], 116 [-1 20 10 -2 1000 100 200 -3 2000], 117 [2000 -1 20 10 -2 100 1000 200 -3], 118 [-1 2000 20 10 -2 100 1000 200 -3], 119 [-1 20 2000 10 -2 100 1000 200 -3], 120 [-1 20 10 2000 -2 100 1000 200 -3], 121 [-1 20 10 -2 2000 100 1000 200 -3], 122 [-1 20 10 -2 100 2000 1000 200 -3], 123 [-1 20 10 -2 100 1000 2000 200 -3], 124 [-1 20 10 -2 100 1000 200 2000 -3], 125 [-1 20 10 -2 100 1000 200 -3 2000], 126 [2000 -1 20 10 -2 100 200 1000 -3], 127 [-1 2000 20 10 -2 100 200 1000 -3], 128 [-1 20 2000 10 -2 100 200 1000 -3], 129 [-1 20 10 2000 -2 100 200 1000 -3], 130 [-1 20 10 -2 2000 100 200 1000 -3], 131 [-1 20 10 -2 100 2000 200 1000 -3], 132 [-1 20 10 -2 100 200 2000 1000 -3], 133 [-1 20 10 -2 100 200 1000 2000 -3], 134 [-1 20 10 -2 100 200 1000 -3 2000], 135 [2000 -1 20 10 -2 100 200 -3 1000], 136 [-1 2000 20 10 -2 100 200 -3 1000], 137 [-1 20 2000 10 -2 100 200 -3 1000], 138 [-1 20 10 2000 -2 100 200 -3 1000], 139 [-1 20 10 -2 2000 100 200 -3 1000], 140 [-1 20 10 -2 100 2000 200 -3 1000], 141 [-1 20 10 -2 100 200 2000 -3 1000], 142 [-1 20 10 -2 100 200 -3 2000 1000], 143 [-1 20 10 -2 100 200 -3 1000 2000], 144 [2000 1000 -1 10 20 -2 200 100 -3], 145 [1000 2000 -1 10 20 -2 200 100 -3], 146 [1000 -1 2000 10 20 -2 200 100 -3], 147 [1000 -1 10 2000 20 -2 200 100 -3], 148 [1000 -1 10 20 2000 -2 200 100 -3], 149 [1000 -1 10 20 -2 2000 200 100 -3], 150 [1000 -1 10 20 -2 200 2000 100 -3], 151 [1000 -1 10 20 -2 200 100 2000 -3], 152 [1000 -1 10 20 -2 200 100 -3 2000], 153 [2000 -1 1000 10 20 -2 200 100 -3], 154 [-1 2000 1000 10 20 -2 200 100 -3], 155 [-1 1000 2000 10 20 -2 200 100 -3], 156 [-1 1000 10 2000 20 -2 200 100 -3], 157 [-1 1000 10 20 2000 -2 200 100 -3], 158 [-1 1000 10 20 -2 2000 200 100 -3], 159 [-1 1000 10 20 -2 200 2000 100 -3], 160 [-1 1000 10 20 -2 200 100 2000 -3], 161 [-1 1000 10 20 -2 200 100 -3 2000], 162 [2000 -1 10 1000 20 -2 200 100 -3], 163 [-1 2000 10 1000 20 -2 200 100 -3], 164 [-1 10 2000 1000 20 -2 200 100 -3], 165 [-1 10 1000 2000 20 -2 200 100 -3], 166 [-1 10 1000 20 2000 -2 200 100 -3], 167 [-1 10 1000 20 -2 2000 200 100 -3], 168 [-1 10 1000 20 -2 200 2000 100 -3], 169 [-1 10 1000 20 -2 200 100 2000 -3], 170 [-1 10 1000 20 -2 200 100 -3 2000], 171 [2000 -1 10 20 1000 -2 200 100 -3], 172 [-1 2000 10 20 1000 -2 200 100 -3], 173 [-1 10 2000 20 1000 -2 200 100 -3], 174 [-1 10 20 2000 1000 -2 200 100 -3], 175 [-1 10 20 1000 2000 -2 200 100 -3], 176 [-1 10 20 1000 -2 2000 200 100 -3], 177 [-1 10 20 1000 -2 200 2000 100 -3], 178 [-1 10 20 1000 -2 200 100 2000 -3], 179 [-1 10 20 1000 -2 200 100 -3 2000], 180 [2000 -1 10 20 -2 1000 200 100 -3], 181 [-1 2000 10 20 -2 1000 200 100 -3], 182 [-1 10 2000 20 -2 1000 200 100 -3], 183 [-1 10 20 2000 -2 1000 200 100 -3], 184 [-1 10 20 -2 2000 1000 200 100 -3], 185 [-1 10 20 -2 1000 2000 200 100 -3], 186 [-1 10 20 -2 1000 200 2000 100 -3], 187 [-1 10 20 -2 1000 200 100 2000 -3], 188 [-1 10 20 -2 1000 200 100 -3 2000], 189 [2000 -1 10 20 -2 200 1000 100 -3], 190 [-1 2000 10 20 -2 200 1000 100 -3], 191 [-1 10 2000 20 -2 200 1000 100 -3], 192 [-1 10 20 2000 -2 200 1000 100 -3], 193 [-1 10 20 -2 2000 200 1000 100 -3], 194 [-1 10 20 -2 200 2000 1000 100 -3], 195 [-1 10 20 -2 200 1000 2000 100 -3], 196 [-1 10 20 -2 200 1000 100 2000 -3], 197 [-1 10 20 -2 200 1000 100 -3 2000], 198 [2000 -1 10 20 -2 200 100 1000 -3], 199 [-1 2000 10 20 -2 200 100 1000 -3], 200 [-1 10 2000 20 -2 200 100 1000 -3], 201 [-1 10 20 2000 -2 200 100 1000 -3], 202 [-1 10 20 -2 2000 200 100 1000 -3], 203 [-1 10 20 -2 200 2000 100 1000 -3], 204 [-1 10 20 -2 200 100 2000 1000 -3], 205 [-1 10 20 -2 200 100 1000 2000 -3], 206 [-1 10 20 -2 200 100 1000 -3 2000], 207 [2000 -1 10 20 -2 200 100 -3 1000], 208 [-1 2000 10 20 -2 200 100 -3 1000], 209 [-1 10 2000 20 -2 200 100 -3 1000], 210 [-1 10 20 2000 -2 200 100 -3 1000], 211 [-1 10 20 -2 2000 200 100 -3 1000], 212 [-1 10 20 -2 200 2000 100 -3 1000], 213 [-1 10 20 -2 200 100 2000 -3 1000], 214 [-1 10 20 -2 200 100 -3 2000 1000], 215 [-1 10 20 -2 200 100 -3 1000 2000], 216 [2000 1000 -1 10 20 -2 100 200 -3], 217 [1000 2000 -1 10 20 -2 100 200 -3], 218 [1000 -1 2000 10 20 -2 100 200 -3], 219 [1000 -1 10 2000 20 -2 100 200 -3], 220 [1000 -1 10 20 2000 -2 100 200 -3], 221 [1000 -1 10 20 -2 2000 100 200 -3], 222 [1000 -1 10 20 -2 100 2000 200 -3], 223 [1000 -1 10 20 -2 100 200 2000 -3], 224 [1000 -1 10 20 -2 100 200 -3 2000], 225 [2000 -1 1000 10 20 -2 100 200 -3], 226 [-1 2000 1000 10 20 -2 100 200 -3], 227 [-1 1000 2000 10 20 -2 100 200 -3], 228 [-1 1000 10 2000 20 -2 100 200 -3], 229 [-1 1000 10 20 2000 -2 100 200 -3], 230 [-1 1000 10 20 -2 2000 100 200 -3], 231 [-1 1000 10 20 -2 100 2000 200 -3], 232 [-1 1000 10 20 -2 100 200 2000 -3], 233 [-1 1000 10 20 -2 100 200 -3 2000], 234 [2000 -1 10 1000 20 -2 100 200 -3], 235 [-1 2000 10 1000 20 -2 100 200 -3], 236 [-1 10 2000 1000 20 -2 100 200 -3], 237 [-1 10 1000 2000 20 -2 100 200 -3], 238 [-1 10 1000 20 2000 -2 100 200 -3], 239 [-1 10 1000 20 -2 2000 100 200 -3], 240 [-1 10 1000 20 -2 100 2000 200 -3], 241 [-1 10 1000 20 -2 100 200 2000 -3], 242 [-1 10 1000 20 -2 100 200 -3 2000], 243 [2000 -1 10 20 1000 -2 100 200 -3], 244 [-1 2000 10 20 1000 -2 100 200 -3], 245 [-1 10 2000 20 1000 -2 100 200 -3], 246 [-1 10 20 2000 1000 -2 100 200 -3], 247 [-1 10 20 1000 2000 -2 100 200 -3], 248 [-1 10 20 1000 -2 2000 100 200 -3], 249 [-1 10 20 1000 -2 100 2000 200 -3], 250 [-1 10 20 1000 -2 100 200 2000 -3], 251 [-1 10 20 1000 -2 100 200 -3 2000], 252 [2000 -1 10 20 -2 1000 100 200 -3], 253 [-1 2000 10 20 -2 1000 100 200 -3], 254 [-1 10 2000 20 -2 1000 100 200 -3], 255 [-1 10 20 2000 -2 1000 100 200 -3], 256 [-1 10 20 -2 2000 1000 100 200 -3], 257 [-1 10 20 -2 1000 2000 100 200 -3], 258 [-1 10 20 -2 1000 100 2000 200 -3], 259 [-1 10 20 -2 1000 100 200 2000 -3], 260 [-1 10 20 -2 1000 100 200 -3 2000], 261 [2000 -1 10 20 -2 100 1000 200 -3], 262 [-1 2000 10 20 -2 100 1000 200 -3], 263 [-1 10 2000 20 -2 100 1000 200 -3], 264 [-1 10 20 2000 -2 100 1000 200 -3], 265 [-1 10 20 -2 2000 100 1000 200 -3], 266 [-1 10 20 -2 100 2000 1000 200 -3], 267 [-1 10 20 -2 100 1000 2000 200 -3], 268 [-1 10 20 -2 100 1000 200 2000 -3], 269 [-1 10 20 -2 100 1000 200 -3 2000], 270 [2000 -1 10 20 -2 100 200 1000 -3], 271 [-1 2000 10 20 -2 100 200 1000 -3], 272 [-1 10 2000 20 -2 100 200 1000 -3], 273 [-1 10 20 2000 -2 100 200 1000 -3], 274 [-1 10 20 -2 2000 100 200 1000 -3], 275 [-1 10 20 -2 100 2000 200 1000 -3], 276 [-1 10 20 -2 100 200 2000 1000 -3], 277 [-1 10 20 -2 100 200 1000 2000 -3], 278 [-1 10 20 -2 100 200 1000 -3 2000], 279 [2000 -1 10 20 -2 100 200 -3 1000], 280 [-1 2000 10 20 -2 100 200 -3 1000], 281 [-1 10 2000 20 -2 100 200 -3 1000], 282 [-1 10 20 2000 -2 100 200 -3 1000], 283 [-1 10 20 -2 2000 100 200 -3 1000], 284 [-1 10 20 -2 100 2000 200 -3 1000], 285 [-1 10 20 -2 100 200 2000 -3 1000], 286 [-1 10 20 -2 100 200 -3 2000 1000], 287 [-1 10 20 -2 100 200 -3 1000 2000], ", sb.String())
}
