networks:

  capinet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.5.0.0/16

services:

  rabbitmq:
    container_name: capillaries_rabbitmq
    image: rabbitmq:3-management
    depends_on:
      - fluentd
    networks:
      capinet:
        ipv4_address: 10.5.0.5
    ports:
      - 15672:15672
      - 5672:5672
    logging:
      driver: fluentd
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: rabbitmq

  cassandra1:
    container_name: capillaries_cassandra1
    build:
      context: .
      dockerfile: ./test/docker/cassandra/Dockerfile
    depends_on:
      - fluentd
    networks:
      capinet:
        ipv4_address: 10.5.0.11
    ports: # Map to known host ports so webapi,toolbelt,daemon running on the host machine can use this Cassandra node
      - 7000:7000
      - 7199:7199
      - 9042:9042
      - 7070:7070
    environment:
      CASSANDRA_SEEDS: 10.5.0.11
    logging:
      driver: fluentd
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: cassandra

  cassandra2:
    container_name: capillaries_cassandra2
    build:
      context: .
      dockerfile: ./test/docker/cassandra/Dockerfile
    depends_on:
      - fluentd
    networks:
      capinet:
        ipv4_address: 10.5.0.12
    ports: # Map to different host ports to avoid collision
      - 17000:7000
      - 17199:7199
      - 19042:9042
      - 17070:7070
    environment:
      CASSANDRA_SEEDS: 10.5.0.11
    logging:
      driver: fluentd
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: cassandra

  prometheus:
    container_name: capillaries_prometheus
    image: prom/prometheus
    depends_on:
      - fluentd
    networks:
      capinet:
        ipv4_address: 10.5.0.4
    ports:
      - 9090:9090
    volumes:
      - ./test/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    logging:
      driver: fluentd
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: prometheus

  daemon1:
    container_name: capillaries_daemon1
    depends_on:
      - fluentd
    build:
      context: .
      dockerfile: ./pkg/exe/daemon/docker/Dockerfile
    volumes:
      - /tmp/capi_cfg:/tmp/capi_cfg:ro
      - /tmp/capi_in:/tmp/capi_in:ro
      - /tmp/capi_out:/tmp/capi_out
    environment:
      CAPI_AMQP_URL: amqp://guest:guest@10.5.0.5/
      CAPI_CASSANDRA_HOSTS: 10.5.0.11
      CAPI_PYCALC_INTERPRETER_PATH: python3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    networks:
      capinet:
        ipv4_address: 10.5.0.101
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: daemon

  daemon2:
    container_name: capillaries_daemon2
    depends_on:
      - fluentd
    build:
      context: .
      dockerfile: ./pkg/exe/daemon/docker/Dockerfile
    volumes:
      - /tmp/capi_cfg:/tmp/capi_cfg:ro
      - /tmp/capi_in:/tmp/capi_in:ro
      - /tmp/capi_out:/tmp/capi_out
    environment:
      CAPI_AMQP_URL: amqp://guest:guest@10.5.0.5/
      CAPI_CASSANDRA_HOSTS: 10.5.0.11
      CAPI_PYCALC_INTERPRETER_PATH: python3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    networks:
      capinet:
        ipv4_address: 10.5.0.102
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: daemon

  webapi:
    container_name: capillaries_webapi
    depends_on:
      - fluentd
    build:
      context: .
      dockerfile: ./pkg/exe/webapi/docker/Dockerfile
    volumes:
      - /tmp/capi_cfg:/tmp/capi_cfg:ro
      - /tmp/capi_in:/tmp/capi_in:ro
      - /tmp/capi_out:/tmp/capi_out
    environment:
      CAPI_AMQP_URL: amqp://guest:guest@10.5.0.5/
      CAPI_CASSANDRA_HOSTS: 10.5.0.11
      CAPI_WEBAPI_PORT: 6543
      CAPI_WEBAPI_ACCESS_CONTROL_ALLOW_ORIGIN: http://localhost:8080,http://127.0.0.1:8080
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      CAPI_LOG_LEVEL: info
    ports:
      - 6543:6543      
    networks:
      capinet:
        ipv4_address: 10.5.0.20
    logging:
      driver: fluentd
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: webapi
    
  ui:
    container_name: capillaries_ui
    depends_on:
      - fluentd
    build:
      context: .
      dockerfile: ./ui/docker/Dockerfile
    environment:
      CAPI_WEBAPI_URL: http://localhost:6543 # The browser comes there from the outside, so use localhost, not 10.5.0.20
    ports:
      - 8080:8080
    networks:
      capinet:
        ipv4_address: 10.5.0.30
    logging:
      driver: fluentd
      options:
        fluentd-address: 10.5.0.7:24224
        fluentd-async: "true"
        tag: ui

  fluentd:
    container_name: capillaries_fluentd
    build:
      context: .
      dockerfile: ./test/docker/fluentd/Dockerfile
    volumes:
      - /tmp/capi_log:/fluentd/log # Make sure everyone can write there
    ports:
      - 24224:24224
      - 24224:24224/udp
    networks:
      capinet:
        ipv4_address: 10.5.0.7

# Stop all containers
# docker stop $(docker ps -a -q)
# Stop Capillaries binaries containers
# docker stop $(docker ps -a | grep -e daemon -e webapi | awk '{print $1}')
# Delete Capillaries binaries containers
# docker rm $(docker ps -a | grep -e daemon -e webapi | awk '{print $1}')
# Delete all containers
# docker rm $(docker ps -qa)
# Delete Capillaries binaries images
# docker image rm $(docker images | grep -e daemon -e webapi | awk '{print $3}')
# Delete all images
# docker image rm $(docker images | awk '{print $3}')