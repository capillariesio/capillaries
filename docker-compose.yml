version: '3'

networks:

  capinet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.5.0.0/16

services:

  rabbitmq:
    container_name: capillaries_rabbitmq
    image: rabbitmq:3-management
    networks:
      capinet:
        ipv4_address: 10.5.0.5
    ports:
      - 15672:15672
      - 5672:5672

  cassandra:
    container_name: capillaries_cassandra
    image: cassandra
    networks:
      capinet:
        ipv4_address: 10.5.0.11
    ports:
      - 9042:9042

  daemon:
    container_name: capillaries_daemon
    build:
      context: .
      dockerfile: ./pkg/exe/daemon/docker/Dockerfile
    volumes:
      - /tmp/capi_cfg:/tmp/capi_cfg:ro
      - /tmp/capi_in:/tmp/capi_in:ro
      - /tmp/capi_out:/tmp/capi_out
    environment:
      AMQP_URL: amqp://guest:guest@10.5.0.5/
      CASSANDRA_HOSTS: '["10.5.0.11"]'
    networks:
      capinet:
        ipv4_address: 10.5.0.101

  webapi:
    container_name: capillaries_webapi
    build:
      context: .
      dockerfile: ./pkg/exe/webapi/docker/Dockerfile
    volumes:
      - /tmp/capi_cfg:/tmp/capi_cfg:ro
      - /tmp/capi_in:/tmp/capi_in:ro
      - /tmp/capi_out:/tmp/capi_out
    environment:
      AMQP_URL: amqp://guest:guest@10.5.0.5/
      CASSANDRA_HOSTS: '["10.5.0.11"]'
      WEBAPI_PORT: 6543
      ACCESS_CONTROL_ACCESS_ORIGIN: 'http://localhost:8080,http://127.0.0.1:8080' # Adjust if needed
    ports:
      - 6543:6543      
    networks:
      capinet:
        ipv4_address: 10.5.0.20
    
  ui:
    container_name: capillaries_ui
    build:
      context: .
      dockerfile: ./ui/docker/Dockerfile
    volumes:
      - /tmp/capi_out:/tmp/capi_out
    environment:
      CAPILLARIES_WEBAPI_URL: 'http://10.5.0.20:6543'
    ports:
      - 8080:8080      
    networks:
      capinet:
        ipv4_address: 10.5.0.30

# docker network create --driver=bridge --subnet=10.5.0.0/16 --ip-range=10.5.0.0/24 --gateway=10.5.0.1 capinet
# docker run -d --hostname my-rabbit -p 15672:15672 -p 5672:5672 --network=capinet --ip 10.5.0.5 rabbitmq:3-management
# docker run -d --hostname my-cassandra -p 9042:9042 --network=capinet --ip 10.5.0.11 cassandra
# docker compose -p "test_capillaries_containers" create  --force-recreate daemon
# docker compose -p "test_capillaries_containers" start daemon
# docker compose -p "test_capillaries_containers" create webapi
# docker compose -p "test_capillaries_containers" start webapi
# docker compose -p "test_capillaries_containers" create ui
# docker compose -p "test_capillaries_containers" start ui

# mkdir /tmp/capi_cfg
# mkdir /tmp/capi_in
# mkdir /tmp/capi_out

# cp -r ./test/data/cfg/* /tmp/capi_cfg
# cp -r ./test/data/in/* /tmp/capi_in
# cp -r ./test/data/out/* /tmp/capi_out

# rm -fR /tmp/capi_cfg
# rm -fR mkdir /tmp/capi_in
# rm -fR mkdir /tmp/capi_out
