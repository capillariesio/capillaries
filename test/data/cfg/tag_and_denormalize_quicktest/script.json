{
    "nodes": {
        "read_tags": {
            "type": "file_table",
            "desc": "Load tags from file",
            "r": {
                "urls": [
                    "{dir_in}/tags.csv{url_suffix}"
                ],
                "csv": {
                    "first_data_line_idx": 0
                },
                "columns": {
                    "col_tag": {
                        "csv": {
                            "col_idx": 0
                        },
                        "col_type": "string"
                    }
                }
            },
            "w": {
                "name": "tags",
                "fields": {
                    "tag": {
                        "expression": "r.col_tag",
                        "type": "string"
                    }
                }
            }
        },
        "read_products": {
            "type": "file_table",
            "desc": "Load product data from CSV files to a table, one input file - one batch",
            "explicit_run_only": true,
            "r": {
                "urls": [
                    "{dir_in}/flipcart_products.tsv{url_suffix}"
                ],
                "csv": {
                    "separator": "\t",
                    "hdr_line_idx": 0,
                    "first_data_line_idx": 1
                },
                "columns": {
                    "col_product_id": {
                        "csv": {
                            "col_idx": 0,
                            "col_format": "%d"
                        },
                        "col_type": "int"
                    },
                    "col_product_name": {
                        "csv": {
                            "col_idx": 1
                        },
                        "col_type": "string"
                    },
                    "col_product_category_tree": {
                        "csv": {
                            "col_idx": 2
                        },
                        "col_type": "string"
                    },
                    "col_retail_price": {
                        "csv": {
                            "col_idx": 3,
                            "col_format": "%f"
                        },
                        "col_type": "decimal2"
                    },
                    "col_product_specifications": {
                        "csv": {
                            "col_idx": 4
                        },
                        "col_type": "string"
                    }
                }
            },
            "w": {
                "name": "products",
                "fields": {
                    "product_id": {
                        "expression": "r.col_product_id",
                        "type": "int"
                    },
                    "name": {
                        "expression": "r.col_product_name",
                        "type": "string"
                    },
                    "category_tree": {
                        "expression": "r.col_product_category_tree",
                        "type": "string"
                    },
                    "price": {
                        "expression": "r.col_retail_price",
                        "type": "decimal2"
                    },
                    "product_spec": {
                        "expression": "r.col_product_specifications",
                        "type": "string"
                    }
                }
            }
        },
        "tag_products": {
            "type": "table_custom_tfm_table",
            "custom_proc_type": "tag_and_denormalize",
            "desc": "Tag products according to criteria and write product tag, id, price to a new table",
            "r": {
                "table": "products",
                "expected_batches_total": 10
            },
            "p": {
                "tag_field_name": "tag",
                "tag_criteria_url": "{dir_cfg}/tag_criteria.json{url_suffix}"
            },
            "w": {
                "name": "tagged_products",
                "fields": {
                    "tag": {
                        "expression": "p.tag",
                        "type": "string"
                    },
                    "product_id": {
                        "expression": "r.product_id",
                        "type": "int"
                    },
                    "price": {
                        "expression": "r.price",
                        "type": "decimal2"
                    }
                },
                "indexes": {
                    "idx_tagged_products_tag": "non_unique(tag)"
                }
            }
        },
        "file_tagged_products_for_operator_review": {
            "type": "table_file",
            "desc": "All tagged products to file that can be inspected by the operator",
            "r": {
                "table": "tagged_products"
            },
            "w": {
                "csv": {
                    "separator": "\t"
                },
                "url_template": "{dir_out}/tagged_products_for_operator_review.csv",
                "columns": [
                    {
                        "csv": {
                            "header": "tag",
                            "format": "%s"
                        },
                        "name": "tag",
                        "expression": "r.tag",
                        "type": "string"
                    },
                    {
                        "csv": {
                            "header": "product_id",
                            "format": "%d"
                        },
                        "name": "product_id",
                        "expression": "r.product_id",
                        "type": "int"
                    },
                    {
                        "csv": {
                            "header": "price",
                            "format": "%s"
                        },
                        "name": "price",
                        "expression": "r.price",
                        "type": "decimal2"
                    }
                ]
            }
        },
        "tag_totals": {
            "type": "table_lookup_table",
            "start_policy": "{totals_start_policy|string}",
            "desc": "For each tag, look up products and perform left outer join with grouping and aggregation",
            "r": {
                "table": "tags",
                "expected_batches_total": 10
            },
            "l": {
                "index_name": "idx_tagged_products_tag",
                "join_on": "r.tag",
                "group": true,
                "join_type": "left"
            },
            "w": {
                "name": "tag_totals",
                "fields": {
                    "tag": {
                        "expression": "r.tag",
                        "type": "string"
                    },
                    "total_value": {
                        "expression": "sum(l.price)",
                        "type": "decimal2"
                    },
                    "avg_value": {
                        "expression": "avg(l.price)",
                        "type": "decimal2"
                    },
                    "min_value": {
                        "expression": "min(l.price)",
                        "type": "decimal2"
                    },
                    "max_value": {
                        "expression": "max(l.price)",
                        "type": "decimal2"
                    },
                    "item_count": {
                        "expression": "count()",
                        "type": "int"
                    }
                }
            }
        },
        "file_tag_totals": {
            "type": "table_file",
            "desc": "Statistics for each tag",
            "r": {
                "table": "tag_totals"
            },
            "w": {
                "top": {
                    "order": "tag(asc)"
                },
                "csv": {
                    "separator": "\t"
                },
                "url_template": "{dir_out}/tag_totals.tsv",
                "columns": [
                    {
                        "csv": {
                            "header": "tag",
                            "format": "%s"
                        },
                        "name": "tag",
                        "expression": "r.tag",
                        "type": "string"
                    },
                    {
                        "csv": {
                            "header": "total_value",
                            "format": "%s"
                        },
                        "name": "total_value",
                        "expression": "r.total_value",
                        "type": "decimal2"
                    },
                    {
                        "csv": {
                            "header": "avg_value",
                            "format": "%s"
                        },
                        "name": "avg_value",
                        "expression": "r.avg_value",
                        "type": "decimal2"
                    },
                    {
                        "csv": {
                            "header": "min_value",
                            "format": "%s"
                        },
                        "name": "min_value",
                        "expression": "r.min_value",
                        "type": "decimal2"
                    },
                    {
                        "csv": {
                            "header": "max_value",
                            "format": "%s"
                        },
                        "name": "max_value",
                        "expression": "r.max_value",
                        "type": "decimal2"
                    },
                    {
                        "csv": {
                            "header": "item_count",
                            "format": "%d"
                        },
                        "name": "item_count",
                        "expression": "r.item_count",
                        "type": "int"
                    }
                ]
            }
        }
    },
    "dependency_policies": {
        "current_active_first_stopped_nogo": {
            "is_default": true,
            "event_priority_order": "run_is_current(desc), node_start_ts(desc)",
            "rules": [
                {
                    "cmd": "go",
                    "expression": "e.run_is_current == true && e.run_final_status == wfmodel.RunStart && e.node_status == wfmodel.NodeBatchSuccess"
                },
                {
                    "cmd": "wait",
                    "expression": "e.run_is_current == true && e.run_final_status == wfmodel.RunStart && e.node_status == wfmodel.NodeBatchNone"
                },
                {
                    "cmd": "wait",
                    "expression": "e.run_is_current == true && e.run_final_status == wfmodel.RunStart && e.node_status == wfmodel.NodeBatchStart"
                },
                {
                    "cmd": "nogo",
                    "expression": "e.run_is_current == true && e.run_final_status == wfmodel.RunStart && e.node_status == wfmodel.NodeBatchFail"
                },
                {
                    "cmd": "go",
                    "expression": "e.run_is_current == false && e.run_final_status == wfmodel.RunStart && e.node_status == wfmodel.NodeBatchSuccess"
                },
                {
                    "cmd": "wait",
                    "expression": "e.run_is_current == false && e.run_final_status == wfmodel.RunStart && e.node_status == wfmodel.NodeBatchNone"
                },
                {
                    "cmd": "wait",
                    "expression": "e.run_is_current == false && e.run_final_status == wfmodel.RunStart && e.node_status == wfmodel.NodeBatchStart"
                },
                {
                    "cmd": "go",
                    "expression": "e.run_is_current == false && e.run_final_status == wfmodel.RunComplete && e.node_status == wfmodel.NodeBatchSuccess"
                },
                {
                    "cmd": "nogo",
                    "expression": "e.run_is_current == false && e.run_final_status == wfmodel.RunComplete && e.node_status == wfmodel.NodeBatchFail"
                }
            ]
        }
    }
}