<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>
<label @FLUENT_LOG> 
  <match fluent.**> 
    @type null 
    @id ignore_fluent_logs 
  </match> 
</label> 
<filter {webapi,daemon}>
  @type parser
  key_name log # Parse "log" JSON field, it contains the original Capillaries JSON log msg
  reserve_data true # We may still need non-Capillaries fields like container_name
  inject_key_prefix orig. # Capillaries fields will be prefixed with orig
  <parse>
    @type json # Parse original msg as JSON
  </parse>
</filter>
<filter {webapi,daemon}>
  @type record_transformer
  remove_keys source,log # We do not need source, it's stdout/stderr; we don't need log, we have parsed it above
</filter>	
<match webapi>
  @type file
  path /fluentd/log/webapi.*.log
  <inject>
    time_key fluentd_time # Add ts - we may want to know when the msg hit fluentd
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
  </inject>  
  time_slice_format %Y%m%d%H # Roll every hour
  compress gzip
  <format>
    @type json # Save as JSON
  </format>
</match>
<match daemon>
  @type file
  path /fluentd/log/daemon.*.log
  <inject>
    time_key fluentd_time # Add ts - we may want to know when the msg hit fluentd
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
  </inject>  
  time_slice_format %Y%m%d%H # Roll every hour
  compress gzip
  <format>
    @type json # Save as JSON
  </format>
</match>
<match cassandra>
  @type file
  path /fluentd/log/cassandra.*.log
  <inject>
    time_key fluentd_time # Add ts - we may want to know when the msg hit fluentd
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
  </inject>  
  time_slice_format %Y%m%d%H # Roll every hour
  compress gzip
  <format>
    @type json # Save as JSON
  </format>
</match>
<match rabbitmq>
  @type file
  path /fluentd/log/rabbitmq.*.log
  <inject>
    time_key fluentd_time # Add ts - we may want to know when the msg hit fluentd
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
  </inject>  
  time_slice_format %Y%m%d%H # Roll every hour
  compress gzip
  <format>
    @type json # Save as JSON
  </format>
</match>
<match prometheus>
  @type file
  path /fluentd/log/prometheus.*.log
  <inject>
    time_key fluentd_time # Add ts - we may want to know when the msg hit fluentd
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
  </inject>  
  time_slice_format %Y%m%d%H # Roll every hour
  compress gzip
  <format>
    @type json # Save as JSON
  </format>
</match>
<match ui>
  @type file
  path /fluentd/log/ui.*.log
  <inject>
    time_key fluentd_time # Add ts - we may want to know when the msg hit fluentd
    time_type string
    time_format %Y-%m-%dT%H:%M:%S.%NZ
  </inject>  
  time_slice_format %Y%m%d%H # Roll every hour
  compress gzip
  <format>
    @type json # Save as JSON
  </format>
</match>